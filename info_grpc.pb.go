// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/info.proto

package sealos_networkmanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InfoServiceClient is the client API for InfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoServiceClient interface {
	GetTrafficStat(ctx context.Context, in *TrafficStatRequest, opts ...grpc.CallOption) (InfoService_GetTrafficStatClient, error)
}

type infoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoServiceClient(cc grpc.ClientConnInterface) InfoServiceClient {
	return &infoServiceClient{cc}
}

func (c *infoServiceClient) GetTrafficStat(ctx context.Context, in *TrafficStatRequest, opts ...grpc.CallOption) (InfoService_GetTrafficStatClient, error) {
	stream, err := c.cc.NewStream(ctx, &InfoService_ServiceDesc.Streams[0], "/proto.InfoService/GetTrafficStat", opts...)
	if err != nil {
		return nil, err
	}
	x := &infoServiceGetTrafficStatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InfoService_GetTrafficStatClient interface {
	Recv() (*TrafficStatResponse, error)
	grpc.ClientStream
}

type infoServiceGetTrafficStatClient struct {
	grpc.ClientStream
}

func (x *infoServiceGetTrafficStatClient) Recv() (*TrafficStatResponse, error) {
	m := new(TrafficStatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InfoServiceServer is the server API for InfoService service.
// All implementations must embed UnimplementedInfoServiceServer
// for forward compatibility
type InfoServiceServer interface {
	GetTrafficStat(*TrafficStatRequest, InfoService_GetTrafficStatServer) error
	mustEmbedUnimplementedInfoServiceServer()
}

// UnimplementedInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInfoServiceServer struct {
}

func (UnimplementedInfoServiceServer) GetTrafficStat(*TrafficStatRequest, InfoService_GetTrafficStatServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTrafficStat not implemented")
}
func (UnimplementedInfoServiceServer) mustEmbedUnimplementedInfoServiceServer() {}

// UnsafeInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoServiceServer will
// result in compilation errors.
type UnsafeInfoServiceServer interface {
	mustEmbedUnimplementedInfoServiceServer()
}

func RegisterInfoServiceServer(s grpc.ServiceRegistrar, srv InfoServiceServer) {
	s.RegisterService(&InfoService_ServiceDesc, srv)
}

func _InfoService_GetTrafficStat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrafficStatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InfoServiceServer).GetTrafficStat(m, &infoServiceGetTrafficStatServer{stream})
}

type InfoService_GetTrafficStatServer interface {
	Send(*TrafficStatResponse) error
	grpc.ServerStream
}

type infoServiceGetTrafficStatServer struct {
	grpc.ServerStream
}

func (x *infoServiceGetTrafficStatServer) Send(m *TrafficStatResponse) error {
	return x.ServerStream.SendMsg(m)
}

// InfoService_ServiceDesc is the grpc.ServiceDesc for InfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.InfoService",
	HandlerType: (*InfoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTrafficStat",
			Handler:       _InfoService_GetTrafficStat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/info.proto",
}
